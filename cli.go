package main

import (
	"flag"
	"fmt"
	"io"
	"os"
	"path"
	"strings"
)

const help = `
Usage:
  staticpack [options...]
  echo "foo" | staticpack -v Foo > foo.go
  staticpack -i file -o file.go

Options:
  -v Variable name.
  -i Input filename, defaults to stdin.
  -p Package name, defaults to current directory.
  -o Output file name, defaults to stdout.
`

const codeFormat = `// Generated by staticpack
package %s

`

var (
	inputFlag   = flag.String("i", "", "")
	outputFlag  = flag.String("o", "", "")
	varFlag     = flag.String("v", "", "")
	packageName = flag.String("p", "main", "")
)

func usage() {
	fmt.Fprintf(os.Stderr, help)
	os.Exit(1)
}

func die(format string, args ...interface{}) {
	fmt.Fprintf(os.Stderr, format, args...)
	os.Exit(1)
}

func main() {
	flag.Usage = usage
	flag.Parse()

	var input io.Reader
	var output io.Writer
	var varName string

	if *inputFlag != "" {
		fi, err := os.Open(*inputFlag)
		if err != nil {
			die("Failed to open input file: %s %s\n", *inputFlag, err.Error())
		}
		defer fi.Close()
		input = fi
		varName = strings.Replace(path.Base(*inputFlag), path.Ext(*inputFlag), "", -1)
	} else {
		input = os.Stdin
	}

	if *outputFlag != "" {
		fo, err := os.Create(*outputFlag)
		if err != nil {
			die("Failed to create output file: %s\n", *outputFlag)
		}
		defer fo.Close()
		output = fo
	} else {
		output = os.Stdout
	}

	if *varFlag != "" {
		varName = *varFlag
	}
	if varName == "" {
		die("No variable name provided, required when file argument is omitted\n")
	}

	varBytes, err := StaticPack(input, varName)
	if err != nil {
		die("Failed: %s\n", err.Error())
	}
	_, err = output.Write([]byte(fmt.Sprintf(codeFormat, *packageName)))
	_, err = output.Write(varBytes)

	if err != nil {
		die("Failed: %s\n", err.Error())
	}
}
